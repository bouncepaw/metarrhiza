```
MycomarkupDocument ::=
   Block*
Block ::=
   Formatted
 | Paragraph
 | Heading
 | CodeBlock
 | ThematicBreak
 | ImageGallery
 | List
 | LaunchPad
 | Quote
 | Table
 | Transclusion
```

= Formatted
**Formatted block** is the most fundamental block in Mycomarkup. It represents a formatted text of the same significance.

Formatted block does not appear by itself. It is always part of something else. The most common container for Formatted is [[../Paragraph]]. This is how a Paragraph containing a Formatted might look:

```myco
This is Formatted inside Paragraph.
```

Formatted has these types of elements inside. They are called **spans**, and are not found in any other blocks.

* **Text span** is a sequence of unformatted text. A Formatted containing only one text span and nothing else is basically unformatted text.
* **Formatting markers** that toggle formatting styles: italic, bold, highlight, underline, monospace, supertext, subtext, strike-through.
* **Inline links** have a //target// and an optional //displayed text//. If there is no displayed text given by the writer, it is the same as target. Empty links are removed from the output.

Grammar:
```
Formatted ::=
   FormattedLine+
FormattedLine ::=
   Span+
Span ::=
   TextSpan | FormattingMarker | InlineLink
FormattingMarker ::=
   "**" | "//" | "++" | "__" | "^^" | ",," | "~~"
InlineLink ::=
   "[[" LWS "]]" # empty link
 | "[[" LWS LinkTarget LWS "]]" # link with target only
 | "[[" LWS LinkTarget LWS "|" LWS LinkDisplayedText LWS "]]" # link with both target and displayed text
```

= Paragraph
* [[./paragraph]]

** [[./inline link]]
** [[./automatic link]]
** [[./span]]

= Heading
* [[./heading]]

= Codeblock
* [[./codeblock]]

= Thematic break
* [[./thematic break]]

= Image gallery
* [[./image gallery]]

= List
* [[./list]]

= Launchpad
* [[./launch pad]]

= Quote
**Quote** is an excerpt from somewhere else.

```
Quote ::= QuoteLine+
QuoteLine ::= ">" QuoteLineContent (NL | EOD)
```

= Algorithm
After initial parsing, we end up with a collection of QuoteLineContents. This is not we need. We gotta convert it like that:
```pseudo
function QuoteLinesFinalized(lines []string) []string {
   # Find the common space prefix length
   prefixlen := 0
   for line in lines {
      curlen := 0
      for char in line {
         if char == " " {
            curlen++
         } else {
            break
         }
      }
      prefixlen := min(prefixlen, curlen)
   }
   # Remove the common space prefix
   result := []string{}
   for line in lines {
      result << line[prefixlen:]
   }
   result
}
```

= Table
**Table** is a table.

```
Table ::=
   "table" Modifer* "{" TableContents "}" IgnoredText EOL
Modifier ::=
   !NL
TableContents ::= (EmptyLine | TableRow)*
TableRow ::=
   TableCellWithoutMarker? TableCell* NL
 | TableCell+ NL
TableCell ::=
   ("|" | "!") TableCellWithoutMarker
TableCellWithoutMarker ::=
   LWS FormattedLine LWS
 | LWS "{" ((Paragraph | ImageGallery | LaunchPad) NL?)* "}" LWS
```

= Transclusion
Not written.